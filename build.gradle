apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'sonar-runner'

apply plugin: 'com.bmuschko.cargo'

def springVersion = '4.1.6.RELEASE'
def springDataJPAVersion = '1.8.0.RELEASE'

def jacksonVersion = '2.4.3'
def slf4jVersion = '1.7.12'
def hibernateVersion = '4.3.8.Final'
def validateVersion = '1.1.0.Final'
def hiberanteValidationVersion = '5.1.3.Final'
def junitVersion = '4.12'
def commonsDbcpVersion = '2.1'
def commonsCollectionsVersion = '4.0'
def commonsLang3Version = '3.3.2'
def elApiVerion = '2.2'
def springSecurityVersion = '4.0.1.RELEASE'
def tomcatVersion = '8.0.24'
def c3p0Version = '0.9.5'
def javaxSAVersion = '3.1.0'
def flywaydbVersion = '3.2.1'
def logbackVersion = '1.1.3'
def groovyVersion = '2.4.3'
def fileUploaderVersion = '1.2.1'
def ioVersion = '1.3.2'

int deployPort = project.hasProperty('port') ? project.port.toInteger() : 8020;

sourceCompatibility = 1.8
group = 'com.intexsoft'

repositories {
    mavenCentral()
}

String releaseType = 'SNAPSHOT'
int major = 1;
int minor = 0;
int BUILD_NUMBER  = 0; 
	 
version = new Version(version_major : major as int, version_minor: minor as int, buildnumber: BUILD_NUMBER , releaseType: releaseType)
	class Version {
	int version_major
	int version_minor
	int buildnumber
	String releaseType
	String buildTime
	  
	String toString() {
	"$version_major.$version_minor-$releaseType"
	}
}

dependencies {
    //apache
    compile "org.apache.commons:commons-collections4:$commonsCollectionsVersion"
    compile "org.apache.commons:commons-lang3:$commonsLang3Version"
    //spring
    compile "org.springframework:spring-beans:$springVersion"
    compile "org.springframework:spring-core:$springVersion"
    compile "org.springframework:spring-web:$springVersion"
    compile "org.springframework:spring-webmvc:$springVersion"
    compile "org.springframework:spring-context:$springVersion"
    compile "org.springframework:spring-orm:$springVersion"
    compile "org.springframework.data:spring-data-jpa:$springDataJPAVersion"
    
    
    compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    compile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate4:$jacksonVersion"
    //database
    compile 'mysql:mysql-connector-java:+'
    compile "org.apache.commons:commons-dbcp2:$commonsDbcpVersion"
    compile "com.mchange:c3p0:$c3p0Version"
    //hibernate
    compile "org.hibernate:hibernate-core:$hibernateVersion"
    compile "org.hibernate:hibernate-entitymanager:$hibernateVersion"
    compile "org.hibernate:hibernate-validator:$hiberanteValidationVersion"
    compile "org.hibernate:hibernate-jpamodelgen:$hibernateVersion"
    //validate
    compile "javax.validation:validation-api:$validateVersion"
    //slf4j
    compile "org.slf4j:slf4j-api:$slf4jVersion"
   
    //logback
    compile "ch.qos.logback:logback-classic:$logbackVersion"
    compile "org.codehaus.groovy:groovy:$groovyVersion"
    //file-upload
	compile "commons-fileupload:commons-fileupload:$fileUploaderVersion"
	compile "commons-io:commons-io:$ioVersion"

    //only build
    providedCompile "javax.el:el-api:$elApiVerion"
	providedCompile "javax.servlet:javax.servlet-api:$javaxSAVersion"
	  //TEST
    testCompile "org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion"
    testCompile "org.apache.tomcat.embed:tomcat-embed-jasper:$tomcatVersion"
    testCompile "org.apache.tomcat:tomcat-juli:$tomcatVersion"
    testCompile "junit:junit:$junitVersion"
    testCompile "org.springframework:spring-test:$springVersion"
    testCompile "javax.el:el-api:$elApiVerion"
    testCompile "javax.servlet:javax.servlet-api:$javaxSAVersion"
    
}

sourceSets {
    generated {
        java {
            srcDirs = ['build/generated']
        }
    }
}

configurations {
    jpamodelgen
}

task generateMetamodel(type: JavaCompile) {
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.jpamodelgen
    options.compilerArgs = [
            "-proc:only"
    ]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}
compileJava.dependsOn generateMetamodel




def dbProperties

task loadDbProperties() {
    file("conf/slave-trade/jdbc.properties").withReader { reader ->
        dbProperties = new Properties()
        dbProperties.load(reader)
        println "=========================="
        println " Data base shema: " + dbProperties.get('db.schema') 
        println " Data base user: " + dbProperties.get('db.jdbc.user')
        println "=========================="
    } 
}

compileJava.dependsOn loadDbProperties


cargo {
    containerId = 'tomcat8x'
    port = 8080
    deployable {
        file = file("build/libs/$war.archiveName")
        context = rootProject.name
    }

   

}


buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-cargo-plugin:2.0.3'
       
    }
}